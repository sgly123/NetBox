# NetBox 测试 Makefile
# 提供便捷的测试命令

.PHONY: help test test-all test-base test-util test-io test-protocol test-server test-app test-integration test-performance
.PHONY: build-tests clean-tests test-report test-coverage test-valgrind setup-tests

# 默认目标
help:
	@echo "NetBox 测试命令:"
	@echo ""
	@echo "  setup-tests     - 设置测试环境"
	@echo "  build-tests     - 构建所有测试"
	@echo "  test           - 运行所有测试"
	@echo "  test-all       - 运行所有测试(详细输出)"
	@echo ""
	@echo "  test-base      - 运行基础组件测试"
	@echo "  test-util      - 运行工具类测试"
	@echo "  test-io        - 运行IO多路复用测试"
	@echo "  test-protocol  - 运行协议层测试"
	@echo "  test-server    - 运行服务器组件测试"
	@echo "  test-app       - 运行应用层测试"
	@echo "  test-integration - 运行集成测试"
	@echo "  test-performance - 运行性能测试"
	@echo ""
	@echo "  test-report    - 生成测试报告"
	@echo "  test-coverage  - 生成代码覆盖率报告"
	@echo "  test-valgrind  - 运行内存检查"
	@echo ""
	@echo "  clean-tests    - 清理测试构建文件"

# 设置测试环境
setup-tests:
	@echo "设置测试环境..."
	@if [ ! -d "build" ]; then mkdir build; fi
	@cd build && cmake .. -DBUILD_TESTS=ON
	@echo "测试环境设置完成"

# 构建所有测试
build-tests: setup-tests
	@echo "构建测试..."
	@cd build && make -j$$(nproc)
	@echo "测试构建完成"

# 运行所有测试(简洁输出)
test: build-tests
	@echo "运行所有测试..."
	@cd build && ../tests/run_tests.sh

# 运行所有测试(详细输出)
test-all: build-tests
	@echo "运行所有测试(详细输出)..."
	@cd build && make run_all_tests

# 运行基础组件测试
test-base: build-tests
	@echo "运行基础组件测试..."
	@cd build && ./tests/bin/test_base

# 运行工具类测试
test-util: build-tests
	@echo "运行工具类测试..."
	@cd build && ./tests/bin/test_util

# 运行IO多路复用测试
test-io: build-tests
	@echo "运行IO多路复用测试..."
	@cd build && ./tests/bin/test_io

# 运行协议层测试
test-protocol: build-tests
	@echo "运行协议层测试..."
	@cd build && ./tests/bin/test_protocol

# 运行服务器组件测试
test-server: build-tests
	@echo "运行服务器组件测试..."
	@cd build && ./tests/bin/test_server

# 运行应用层测试
test-app: build-tests
	@echo "运行应用层测试..."
	@cd build && ./tests/bin/test_app

# 运行集成测试
test-integration: build-tests
	@echo "运行集成测试..."
	@cd build && ./tests/bin/test_integration

# 运行性能测试
test-performance: build-tests
	@echo "运行性能测试..."
	@cd build && ./tests/bin/test_performance

# 生成测试报告
test-report: build-tests
	@echo "生成测试报告..."
	@cd build && ../tests/run_tests.sh
	@echo "测试报告已生成"

# 生成代码覆盖率报告
test-coverage:
	@echo "生成代码覆盖率报告..."
	@if [ ! -d "build-coverage" ]; then mkdir build-coverage; fi
	@cd build-coverage && cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug \
		-DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_C_FLAGS="--coverage"
	@cd build-coverage && make -j$$(nproc)
	@cd build-coverage && ../tests/run_tests.sh || true
	@cd build-coverage && lcov --directory . --capture --output-file coverage.info
	@cd build-coverage && lcov --remove coverage.info '/usr/*' --output-file coverage.info
	@cd build-coverage && lcov --remove coverage.info '*/tests/*' --output-file coverage.info
	@cd build-coverage && genhtml coverage.info --output-directory coverage_html
	@echo "代码覆盖率报告已生成到 build-coverage/coverage_html/"

# 运行内存检查
test-valgrind: build-tests
	@echo "运行内存检查..."
	@cd build && valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
		--track-origins=yes --verbose --log-file=valgrind-base.txt \
		./tests/bin/test_base || true
	@cd build && valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
		--track-origins=yes --verbose --log-file=valgrind-util.txt \
		./tests/bin/test_util || true
	@echo "内存检查完成，结果保存在 build/valgrind-*.txt"

# 清理测试构建文件
clean-tests:
	@echo "清理测试构建文件..."
	@rm -rf build build-coverage
	@rm -f test_report_*.txt
	@echo "清理完成"

# 快速测试(只运行基础测试)
quick-test: build-tests
	@echo "运行快速测试..."
	@cd build && ./tests/bin/test_base --gtest_filter="-*Performance*:*MultiThread*"
	@cd build && ./tests/bin/test_util --gtest_filter="-*Performance*"

# 性能基准测试
benchmark: build-tests
	@echo "运行性能基准测试..."
	@cd build && ./tests/bin/test_base --gtest_filter="*Performance*"
	@cd build && ./tests/bin/test_performance

# 调试模式测试
debug-test:
	@echo "构建调试模式测试..."
	@if [ ! -d "build-debug" ]; then mkdir build-debug; fi
	@cd build-debug && cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug
	@cd build-debug && make -j$$(nproc)
	@echo "运行调试模式测试..."
	@cd build-debug && ../tests/run_tests.sh

# 发布模式测试
release-test:
	@echo "构建发布模式测试..."
	@if [ ! -d "build-release" ]; then mkdir build-release; fi
	@cd build-release && cmake .. -DBUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release
	@cd build-release && make -j$$(nproc)
	@echo "运行发布模式测试..."
	@cd build-release && ../tests/run_tests.sh

# 安装测试依赖
install-deps:
	@echo "安装测试依赖..."
	@sudo apt-get update
	@sudo apt-get install -y \
		build-essential \
		cmake \
		libgtest-dev \
		libspdlog-dev \
		libfmt-dev \
		libyaml-cpp-dev \
		valgrind \
		lcov
	@echo "依赖安装完成"

# 检查测试环境
check-env:
	@echo "检查测试环境..."
	@which cmake > /dev/null || (echo "❌ CMake 未安装" && exit 1)
	@which make > /dev/null || (echo "❌ Make 未安装" && exit 1)
	@which g++ > /dev/null || (echo "❌ G++ 未安装" && exit 1)
	@pkg-config --exists gtest || (echo "❌ Google Test 未安装" && exit 1)
	@echo "✅ 测试环境检查通过"
