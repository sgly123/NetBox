name: NetBox Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          libgtest-dev \
          libspdlog-dev \
          libfmt-dev \
          libyaml-cpp-dev \
          valgrind
    
    - name: Setup compiler
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        else
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        fi
    
    - name: Build Google Test
      run: |
        cd /usr/src/googletest
        sudo cmake .
        sudo make
        sudo make install
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure CMake
      run: |
        rm -rf build
        cmake -S . -B build \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -DBUILD_TESTS=ON \
        -DCMAKE_C_COMPILER=$CC \
        -DCMAKE_CXX_COMPILER=$CXX

    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        chmod +x ../tests/run_tests.sh
        ../tests/run_tests.sh
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: build/test_report_*.txt
    
    - name: Run memory check (Debug only)
      if: matrix.build_type == 'Debug' && matrix.compiler == 'gcc'
      run: |
        cd build
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
          --track-origins=yes --verbose --log-file=valgrind-out.txt \
          ./tests/bin/test_base || true
        cat valgrind-out.txt

  coverage:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
        build-essential \
        cmake \
        libgtest-dev \
        libspdlog-dev \
        libfmt-dev \
        libyaml-cpp-dev \
        lcov \
        gcovr

    - name: Build Google Test
      run: |
        cd /usr/src/googletest
        sudo cmake .
        sudo make
        sudo make install
    
    - name: Create build directory
      run: mkdir -p build
    
    - name: Configure CMake with coverage
      run: |
        rm -rf build
        cmake -S . -B build \
        -DCMAKE_BUILD_TYPE=Debug \
        -DBUILD_TESTS=ON \
        -DCMAKE_CXX_FLAGS="--coverage" \
        -DCMAKE_C_FLAGS="--coverage" \
        -DCMAKE_EXE_LINKER_FLAGS="--coverage"
    
    - name: Build with coverage
      run: |
        cd build
        make -j$(nproc)
    
    - name: Run tests for coverage
      run: |
        cd build
        ../tests/run_tests.sh || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
